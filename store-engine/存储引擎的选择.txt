#########################################
######  mysql存储引擎概述      ############
#########################################
MyISAM
MyISAM基于ISAM存储引擎，并对其进行扩展。它是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一。
MyISAM拥有较高的插入、查询速度，但不支持事务。
MyISAM主要特性有：
   1、大文件（达到63位文件长度）在支持大文件的文件系统和操作系统上被支持。

   2、当把删除和更新及插入操作混合使用的时候，动态尺寸的行产生更少碎片。这要通过合并相邻被删除的块，以
     及若下一个块被删除，就扩展到下一块自动完成。

   3、每个MyISAM表最大索引数是64，这可以通过重新编译来改变。每个索引最大的列数是16

   4、NULL被允许在索引的列中，这个值占每个键的0~1个字节

   5、可以把数据文件和索引文件放在不同目录（InnoDB是放在一个目录里面的）

   6、MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。

InnoDB存储引擎
InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，InnoDB是默认的MySQL引擎。
InnoDB主要特性有：
   1、InnoDB给MySQL提供了具有提交、回滚和崩溃恢复能力的事物安全（ACID兼容）存储引擎。InnoDB锁定在行级并
      且也在SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以
      自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合。

   2、InnoDB是为处理巨大数据量的最大性能设计。它的CPU效率可能是任何其他基于磁盘的关系型数据库引擎锁不能匹
      敌的

   3、InnoDB存储引擎完全与MySQL服务器整合，InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。
      InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘文件）。这与MyISAM表不同，
      比如在MyISAM表中每个表被存放在分离的文件中。InnoDB表可以是任何尺寸，即使在文件尺寸被限制为2GB的操作
      系统上

   4、InnoDB支持外键完整性约束，存储表中的数据时，每张表的存储都按主键顺序存放，如果没有显示在表定义时指定
      主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键。

   5、虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。
      A、第一个重大区别是InnoDB的数据文件本身就是索引文件。从 上文知道，MyISAM索引文件和数据文件是分离的，
      索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索 引结构，这棵树的
      叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。
      B、第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB
      的所有辅助索引都引用主键作为data域

MEMORY存储引擎
MEMORY存储引擎将表中的数据存储到内存中，未查询和引用其他表数据提供快速访问。
MEMORY主要特性有：
   1、MEMORY表的每个表可以有多达32个索引，每个索引16列，以及500字节的最大键长度

   2、MEMORY存储引擎执行HASH和BTREE缩影

   3、可以在一个MEMORY表中有非唯一键值

   4、MEMORY表使用一个固定的记录长度格式

   5、MEMORY不支持BLOB或TEXT列

   6、MEMORY支持AUTO_INCREMENT列和对可包含NULL值的列的索引

   7、MEMORY表在所由客户端之间共享（就像其他任何非TEMPORARY表）

   8、MEMORY表内存被存储在内存中，内存是MEMORY表和服务器在查询处理时的空闲中，创建的内部表共享

   9、当不再需要MEMORY表的内容时，要释放被MEMORY表使用的内存，应该执行DELETE FROM或TRUNCATE TABLE，
      或者删除整个表（使用DROP TABLE)

Archive存储引擎
Archive存储引擎基本上用于数据归档；它的压缩比非常的高，存储空间大概是innodb的10-15分之一所以它用来存储历
史数据非常的适合，由于它不支持索引同时也不能缓存索引和数据，所以它不适合作为并发访问表的存储引擎。Archive
存储引擎使用行锁来实现高并发插入操作，但是它不支持事务，其设计目标只是提供高速的插入和压缩功能。
Archive的主要特性：
   1、archive存储引擎支持insert、replace和select操作，但是不支持update和delete。

   2、archive存储引擎支持blob、text等大字段类型。支持auto_increment自增列同时自增列可以不是唯一索引。

   3、archive支持auto_increment列，但是不支持往auto_increment列插入一个小于当前最大的值的值。

   4、archive不支持索引所以无法在archive表上创建主键、唯一索引、和一般的索引。

NDB/HEAP存储引擎->自行了解


####################################################
############# mysql 存储引擎的具体业务选型 ############
####################################################
具体的存储引擎的特征比较
https://dev.mysql.com/doc/refman/5.6/en/storage-engines.html
InnoDB: 如果要提供提交、回滚、崩溃恢复能力的事务安全（ACID兼容）能力，并要求实现并发控制，InnoDB是一个好的选择

Archive: 如果只有INSERT和SELECT操作，可以选择Archive，Archive支持高并发的插入操作，但是本身不是事务安全的。
         Archive非常适合存储归档数据，如记录日志信息可以使用Archive

MyISAM: 如果数据表主要用来插入和查询记录，则MyISAM（但是不支持事务）引擎能提供较高的处理效率

Memory: 如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存中的Memory引擎，
        MySQL中使用该引擎作为临时表，存放查询的中间结果。数据的处理速度很快但是安全性不高。