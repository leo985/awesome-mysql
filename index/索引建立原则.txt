   普通mysql运行，数据量和访问量不大的话，是足够快的，但是当数据量和访问量剧增的时候，那么就会明显发现MySQL很慢，
甚至down掉，那么就要考虑优化我们的mysql了。其中优化mysql的一个重要环节就是为数据库建立正确合理的索引。
   如果没有索引，执行查询时mysql必须从第一个记录开始扫描整个表的所有记录，直至找到符合要求的记录。表里面的记录数
量越多，这个操作的代价就越高。如果作为搜索条件的列上已经创建了索引，mysql无需扫描任何记录即可迅速得到目标记录所在
的位置。也就是说索引可以大大减少数据库管理系统查找数据的时间。

索引有哪些优点？
    1、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。

    2、可以大大加快数据的检索速度，这也是创建索引的最主要原因。

    3、可以加速表和表之间的连接，这在实现数据的参考完整性方面特别有意义。

    4、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。

索引有哪些缺点？
    1、创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。

    2、除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，需要的空间就会更大。

    3、当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。

建立和使用索引注意事项：

    1、表的主键、外键必须有索引；

    2、数据量超过300的表应该有索引；

    3、经常与其他表进行连接的表，在连接字段上应该建立索引；

    4、对 where,on,group by,order by 中出现的列使用索引；经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；
       where条件中是OR关系，加索引不起作用

    5、索引应该建在区分度高的字段上面，区分度的公式是count(distinct（字段）)/count(*)

    6、索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；对于那些定义为text、image和bit数据类型的列不应该增加索引。因为这些列的数据量要么相当大，要么取值很少。

    7、复合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替：
        A、正确选择复合索引中的主列字段(联合索引中的第一个)，一般是选择性较好的字段；

        B、复合索引的几个字段是否经常同时以AND方式出现在Where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引；

        C、如果复合索引中包含的字段经常单独出现在Where子句中，则分解为多个单字段索引；

        D、如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段；

        E、如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引;

        F、mysql 从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index(a,b,c). 可以支持(a,b,c),(a,c),(a)3种组合进行查找，
          但不支持 b,c 进行查找.当最左侧字段是常量引用时，索引就十分有效。

        H、不要试图分别基于单个列建立多个单列索引（因为虽然有多个单列索引，但是MySQL只能用到其中的那个它认为似乎最有效率的单列索引)

    8、频繁进行数据操作的表，不要建立太多的索引；

    9、为较长的字符串使用前缀索引。前缀索引:有时候需要索引很长的字符列，这会让索引变得大且慢。通常可以索引开始的部分字符，
        这样可以大大节约索引空间，从而提高索引效率。其缺点是不能用于ORDER BY和GROUP BY操作，也不能用于覆盖索引 Covering
        index（即当索引本身包含查询所需全部数据时，不再访问数据文件本身）

    10、单表数据太少，不适合建索引

    11、NULL会导致索引形同虚设

    12、在以通配符% 和_ 开头作查询时，mysql索引是无效的。有索引的字段，应该尽量减少like使用。但是这样索引是有效的：select * from tbl1 where name like 'xxx%'。
