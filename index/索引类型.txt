#mysql -> select version();
https://dev.mysql.com/doc/refman/5.6/en/create-index.html
#存储引擎支持的索引类型
存储引擎      允许的索引类型
InnoDB       BTREE
MyISAM       BTREE
MEMORY/HEAP  HASH,BTREE
NDB          HASH,BTREE

BTREE索引:
B-Tree 索引是MySQL数据库中使用最为频繁的索引类型，除了Archive存储引擎之外的其他所有的存储引擎都支持B-Tree索引。

不仅仅在MySQL中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为

B-Tree索引的存储结构在数据库的数据检索中有非常优异的表现一般来说MySQL中的B-Tree索引的物理文件大多都是以Balance Tree

的结构来存储的，也就是所有实际需要的数据都存放于Tree的Leaf Node，而且到任何一个Leaf Node的最短路径的长度都是完全

相同的，所以我们大家都称之为B-Tree索引当然，可能各种数据库(或MySQL的各种存储引擎）在存放自己的B-Tree索引的时候会对

存储结构稍作改造。如Innodb存储引擎的B-Tree索引实际使用的存储结构实际上是B+Tree，也就是在B-Tree数据结构的基础上做了

很小的改造，在每一个Leaf Node 上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个Leaf Node的

指针信息，这主要是为了加快检索多个相邻Leaf Node的效率考虑。B+树是一个平衡的多叉树，从根节点到每个叶子节点的高度差值不超过1，

而且同层级的节点间有指针相互链接。在B+树上的常规检索，从根节点到叶子节点的搜索效率基本相当，不会出现大幅波动，而且基于索引的

顺序扫描时，也可以利用双向指针快速左右移动，效率非常高。

HASH索引
Hash 索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到叶节
点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引。

HASH索引的弊端
  1、Hash 索引仅仅能满足"=","IN"和"<=>"查询，不能使用范围查询。
    由于Hash索引比较的是进行Hash运算之后的Hash值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的Hash算法
    处理之后的Hash值的大小关系，并不能保证和Hash运算前完全一样。
 
  2、Hash索引无法被用来避免数据的排序操作。
    由于Hash索引中存放的是经过Hash计算之后的Hash值，而且Hash值的大小关系并不一定和Hash运算前的键值完全一样，所以数据库无法
    利用索引的数据来避免任何排序运算；
 
  3、Hash索引不能利用部分索引键查询。
    对于组合索引，Hash索引在计算Hash值的时候是组合索引键合并后再一起计算Hash值，而不是单独计算Hash值，所以通过组合索引的前
    面一个或几个索引键进行查询的时候，Hash索引也无法被利用。
 
  4、Hash 索引在任何时候都不能避免表扫描。
    前面已经知道，Hash索引是将索引键通过Hash运算之后，将Hash运算结果的Hash值和所对应的行指针信息存放于一个Hash表中，由于不
    同索引键存在相同Hash值，所以即使取满足某个 Hash 键值的数据的记录条数，也无法从 Hash 索引中直接完成查询，还是要通过访问表
    中的实际数据进行相应的比较，并得到相应的结果。
 
  5、Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。

BTREE索引与HASH索引的区别
哈希索引是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快
  1、如果是等值查询，那么哈希索引明显有绝对优势，因为只需要经过一次算法即可找到相应的键值；当然了，这个前提是，键值都是唯一的。
     如果键值不是唯一的，就需要先找到该键所在位置，然后再根据链表往后扫描，直到找到相应的数据；
 
  2、从示意图中也能看到，如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先是有序的键值，经过哈希算法后，有可能变成
     不连续的了，就没办法再利用索引完成范围查询检索；
 
  3、同理，哈希索引也没办法利用索引完成排序，以及like ‘xxx%’ 这样的部分模糊查询（这种部分模糊查询，其实本质上也是范围查询）；
 
  4、哈希索引也不支持多列联合索引的最左匹配规则；
 
  5、B+树索引的关键字检索效率比较平均，不像B树那样波动幅度大，在有大量重复键值情况下，哈希索引的效率也是极低的，因为存在所谓的
     哈希碰撞问题。


总结:
  1、在MySQL中，只有HEAP/MEMORY引擎表才能显式支持哈希索引（NDB也支持，但这个不常用），InnoDB引擎的自适应哈希索引（adaptive hash index）不在此列，因为这不是创建索引时可指定的。
  2、在MYSQL表中，如果存储的数据重复度很低（也就是说基数很大），对该列数据以等值查询为主，没有范围查询、没有排序的时候，特别适合采用哈希索引
  3、大多数场景下，都会有范围查询、排序、分组等查询特征，用B+索引
















