Mysql的优化，大体可以分为三部分：索引的优化，sql语句的优化，表的优化

索引的优化:见索引建立原则

sql语句的优化:

mysql的配置文件:my.cnf
配置参数                配置用途
slow_query_log_file    慢查询日志文件路径
slow_query_log         用于指定是否打开慢查询日志
long_query_time        超过多少秒的查询就写入日志
log_output=file        必须指定file或者是table如果是table则慢查询信息会保存到mysql库下的slow_log表中。默认值是NONE

mysql自带查看慢日志的工具:mysqldumpslow
具体的用法参见 https://dev.mysql.com/doc/refman/5.6/en/mysqldumpslow.html

流程:
1、捕获低效的SQL
  A、slow_query_log，这个参数设置为ON，可以捕获执行时间超过一定数值的SQL语句。
  B、ong_query_time，当SQL语句执行时间超过此数值时，就会被记录到日志中，建议设置为1或者更短。
  C、slow_query_log_file，记录日志的文件名。
  D、log_queries_not_using_indexes，这个参数设置为ON，可以捕获到所有未使用索引的SQL语句。

2、慢查询优化的基本步骤
  A、先运行看看是否真的很慢，注意设置SQL_NO_CACHE
  B、where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，
     单表每个字段分别查询，看哪个字段的区分度最高
  C、explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）
  D、order by limit 形式的sql语句让排序的表优先查
  E、参照索引建立原则

3、优化原则
  A、查询时，能不要*就不用*，尽量写全字段名
  B、大部分情况连接效率远大于子查询
  C、多使用explain和profile分析查询语句
  D、查看慢查询日志，找出执行时间长的sql语句优化
  E、多表连接时，尽量小表驱动大表，即小表 join 大表
  F、在千万级分页时使用limit
  H、对于经常使用的查询，可以开启缓存

数据库表的优化:
1、表的字段尽可能用NOT NULL
2、字段长度固定的表查询会更快
3、把数据库的大表按时间或一些标志分成小表
4、将表拆分
   A、水平切分:将记录散列到不同的表中，各表的结构完全相同，每次从分表中查询, 提高效率。
   B、垂直切分:将表中大字段单独拆分到另外一张表, 形成一对一的关系。








